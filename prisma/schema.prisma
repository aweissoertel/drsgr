// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model GroupRecommendation {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  sessionCode          String              @unique
  userVotes            UserVote[]
  votingEnded          Boolean
  aggregationResultsAR AggregationResult[] @relation("AggregatingResults")
  aggregationResultsAP AggregationResult[] @relation("AggregatingPreferences")
  qrcode               String
  aggregatedInput      AggregatedInput?
  budget               Int
  stayDays             Int
  description          String
  finalVotes           FinalVote[]
  concluded            Boolean
  finalWinners         RankResult[]
  surveyMode           Boolean
}

model UserVote {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  recommendation   GroupRecommendation @relation(fields: [recommendationId], references: [id])
  recommendationId String              @db.ObjectId
  preferences      Attributes
  budget           Int
}

model AggregationResult {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  recommendationAR GroupRecommendation? @relation("AggregatingResults", fields: [recommARId], references: [id])
  recommARId       String?              @db.ObjectId
  recommendationAP GroupRecommendation? @relation("AggregatingPreferences", fields: [recommAPId], references: [id])
  recommAPId       String?              @db.ObjectId
  method           String
  rankedCountries  RankResult[]
}

model AggregatedInput {
  id                         String              @id @default(auto()) @map("_id") @db.ObjectId
  recommendation             GroupRecommendation @relation(fields: [recommendationId], references: [id])
  recommendationId           String              @unique @db.ObjectId
  multiAP                    Attributes
  averageAP                  Attributes
  bordaCountAP               Attributes
  mostPleasureAP             Attributes
  recommendationsPerUserVote RankResultList[]
}

model Country {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  u_name     String
  name       String
  region     String
  attributes Attributes
}

model FinalVote {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  recommendation   GroupRecommendation @relation(fields: [recommendationId], references: [id])
  recommendationId String              @db.ObjectId
  first            String?
  second           String?
  third            String?
}

type RankResult {
  u_name         String
  rank           Int
  rankReverse    Int
  rankOverBudget Int
  totalScore     Float
  overBudget     Boolean
}

type Attributes {
  nature        Float
  architecture  Float
  hiking        Float
  wintersports  Float
  beach         Float
  culture       Float
  culinary      Float
  entertainment Float
  shopping      Float
}

type RankResultList {
  list RankResult[]
  name String
}
